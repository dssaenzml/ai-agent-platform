[tool.poetry]
name = "ai-agent-platform"
version = "0.1.0"
description = "A comprehensive multi-agent AI platform built with LangChain, FastAPI, and modern AI technologies"
authors = ["Diego Saenz <dosaenz28@gmail.com>"]
readme = "README.md"
keywords = ["ai", "agents", "langchain", "fastapi", "vector-database", "rag", "llm"]
repository = "https://github.com/dssaenzml/ai-agent-platform"
homepage = "https://github.com/dssaenzml/ai-agent-platform"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [
    { include = "app" },
]

[tool.poetry.dependencies]
python = "^3.11"
uvicorn = "^0.23.2"
sqlalchemy = "^2.0.30"
snowflake-snowpark-python = {extras = ["pandas"], version = "^1.18.0", python = "3.11"}
tqdm = {version = "^4.66.4", python = "3.11"}
unstructured = {extras = ["all-docs"], version = "^0.15.0", python = "3.11"}
azure-storage-blob = {version = "^12.21.0", python = "3.11"}
urllib3 = {version = "^2.2.2", python = "3.11"}
python-magic = {version = "^0.4.27", python = "3.11"}
unstructured-pytesseract = {version = "^0.3.12", python = "3.11"}
opencv-python = {version = "^4.10.0.84", python = "3.11"}
pydantic = {version = "<3", python = "3.11"}
langchain = {version = "^0.3.1", python = "3.11"}
langchain-core = {version = "^0.3.7", python = "3.11"}
langchain-community = {version = "^0.3.1", python = "3.11"}
langgraph = {version = "^0.2.32", python = "3.11"}
azure-identity = {version = "^1.19.0", python = "3.11"}
azure-storage-file-datalake = {version = "^12.17.0", python = "3.11"}
aiofiles = {version = "^24.1.0", python = "3.11"}
langchain-qdrant = {version = "^0.2.0", python = "3.11"}
seaborn = {version = "^0.13.2", python = "3.11"}
httpx = {version = "<0.28", python = "3.11"}
azure-communication-email = {version = "^1.0.0", python = "3.11"}
python-docx = {version = "^1.1.2", python = "3.11"}
qdrant-client = {version = "<1.13.0", python = "3.11"}
weasyprint = {version = "^64.0", python = "3.11"}
langserve = {extras = ["server"], version = "^0.3.1", python = "3.11"}
langchain-openai = {version = ">=0.3", python = "3.11"}


[tool.poetry.group.dev.dependencies]
langchain-cli = ">=0.0.15"
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-watch = "^4.2.0"
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
httpx = "^0.25.0"  # For testing async endpoints

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
# Relaxed settings for legacy codebase
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
# Handle duplicate module names in agent subdirectories
namespace_packages = true
explicit_package_bases = true
# Allow any types and disable strict checking for this legacy codebase
allow_any_generics = true
allow_subclassing_any = true
allow_untyped_calls = true
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_decorators = true
disable_error_code = [
    "attr-defined", "assignment", "return-value", "call-arg", "misc", 
    "import-untyped", "union-attr", "func-returns-value", "arg-type", 
    "dict-item", "index", "operator", "call-overload", "has-type"
]
# Exclude agent subdirectories that have duplicate module names
exclude = [
    # Test files
    'tests/',
    # Build artifacts  
    'build/',
    'dist/',
    '.venv/',
    # All agent-specific subdirectories that contain duplicate module names
    'app/chain/agent-.*/',
    'app/graph/agent-.*/',
    'app/model/agent-.*/',
    'app/prompt/agent-.*/',
    'app/tools/agent-.*/',
    'app/vector_db/agent-.*\.py$',
    'app/api/endpoints/agent-.*\.py$',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
